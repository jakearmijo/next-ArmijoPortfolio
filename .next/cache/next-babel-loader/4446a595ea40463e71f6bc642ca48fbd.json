{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport remark from 'remark';\nimport html from 'remark-html';\n\nvar ensureString = function ensureString(string) {\n  return string ? \"\".concat(string) : '';\n};\n\nvar ensureNumeric = function ensureNumeric(string) {\n  return Number(ensureString(string).replace(/[^0-9.]/gi, ''));\n};\n\nvar ensureArray = function ensureArray() {\n  var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return !array ? [] : Array.isArray(array) ? array : [array];\n};\n\nvar ensureObject = function ensureObject(object) {\n  return object || {};\n}; // POST.JS\n\n\nconst postsDirectory = path.join(process.cwd(), 'blogposts');\n\nfunction getSortedPostsData() {\n  // Get file names under /posts\n  const fileNames = fs.readdirSync(postsDirectory);\n  const allPostsData = ensureArray(fileNames.map(fileName => {\n    // Remove \".md\" from file name to get id\n    const id = fileName.replace(/\\.md$/, ''); // Read markdown file as string\n\n    const fullPath = path.join(postsDirectory, fileName);\n    const fileContents = fs.readFileSync(fullPath, 'utf8'); // Use gray-matter to parse the post metadata section\n\n    const matterResult = matter(fileContents); // Combine the data with the id\n\n    return _objectSpread({\n      id\n    }, matterResult.data);\n  })); // Sort posts by date\n\n  return allPostsData.sort((a, b) => {\n    if (a.date < b.date) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}\n\nfunction getAllPostIds() {\n  const fileNames = fs.readdirSync(postsDirectory); // Returns an array that looks like this:\n  // [\n  //   {\n  //     params: {\n  //       id: 'ssg-ssr'\n  //     }\n  //   },\n  //   {\n  //     params: {\n  //       id: 'pre-rendering'\n  //     }\n  //   }\n  // ]\n\n  return fileNames.map(fileName => {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, '')\n      }\n    };\n  });\n}\n\nasync function getPostData(id) {\n  const fullPath = path.join(postsDirectory, `${id}.md`);\n  const fileContents = fs.readFileSync(fullPath, 'utf8'); // Use gray-matter to parse the post metadata section\n\n  const matterResult = matter(fileContents); // Use remark to convert markdown into HTML string\n\n  const processedContent = await remark().use(html).process(matterResult.content);\n  const contentHtml = processedContent.toString(); // Combine the data with the id and contentHtml\n\n  return _objectSpread({\n    id,\n    contentHtml\n  }, matterResult.data);\n}\n\nexport { ensureString, ensureNumeric, ensureArray, ensureObject, getSortedPostsData, getAllPostIds, getPostData };","map":{"version":3,"sources":["/Users/jake/CodingCentral/next-ArmijoPortfolio/lib/utils/index.js"],"names":["fs","path","matter","remark","html","ensureString","string","concat","ensureNumeric","Number","replace","ensureArray","array","arguments","length","undefined","Array","isArray","ensureObject","object","postsDirectory","join","process","cwd","getSortedPostsData","fileNames","readdirSync","allPostsData","map","fileName","id","fullPath","fileContents","readFileSync","matterResult","data","sort","a","b","date","getAllPostIds","params","getPostData","processedContent","use","content","contentHtml","toString"],"mappings":"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","sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport matter from 'gray-matter'\nimport remark from 'remark'\nimport html from 'remark-html'\n\nvar ensureString = function ensureString(string) {\n    return string ? \"\".concat(string) : '';\n  }; \nvar ensureNumeric = function ensureNumeric(string) {\nreturn Number(ensureString(string).replace(/[^0-9.]/gi, ''));\n};\nvar ensureArray = function ensureArray() {\nvar array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\nreturn !array ? [] : Array.isArray(array) ? array : [array];\n};\nvar ensureObject = function ensureObject(object) {\nreturn object || {};\n};\n\n// POST.JS\nconst postsDirectory = path.join(process.cwd(), 'blogposts')\n\nfunction getSortedPostsData() {\n  // Get file names under /posts\n  const fileNames = fs.readdirSync(postsDirectory)\n  const allPostsData = ensureArray(fileNames.map(fileName => {\n    // Remove \".md\" from file name to get id\n    const id = fileName.replace(/\\.md$/, '')\n\n    // Read markdown file as string\n    const fullPath = path.join(postsDirectory, fileName)\n    const fileContents = fs.readFileSync(fullPath, 'utf8')\n\n    // Use gray-matter to parse the post metadata section\n    const matterResult = matter(fileContents)\n\n    // Combine the data with the id\n    return {\n      id,\n      ...matterResult.data\n    }\n  }))\n  // Sort posts by date\n  return allPostsData.sort((a, b) => {\n    if (a.date < b.date) {\n      return 1\n    } else {\n      return -1\n    }\n  })\n}\n\nfunction getAllPostIds() {\n  const fileNames = fs.readdirSync(postsDirectory)\n\n  // Returns an array that looks like this:\n  // [\n  //   {\n  //     params: {\n  //       id: 'ssg-ssr'\n  //     }\n  //   },\n  //   {\n  //     params: {\n  //       id: 'pre-rendering'\n  //     }\n  //   }\n  // ]\n  return fileNames.map(fileName => {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, '')\n      }\n    }\n  })\n}\n\nasync function getPostData(id) {\n  const fullPath = path.join(postsDirectory, `${id}.md`)\n  const fileContents = fs.readFileSync(fullPath, 'utf8')\n\n  // Use gray-matter to parse the post metadata section\n  const matterResult = matter(fileContents)\n\n  // Use remark to convert markdown into HTML string\n  const processedContent = await remark()\n    .use(html)\n    .process(matterResult.content)\n  const contentHtml = processedContent.toString()\n\n  // Combine the data with the id and contentHtml\n  return {\n    id,\n    contentHtml,\n    ...matterResult.data\n  }\n}\n\nexport {\n    ensureString,\n    ensureNumeric,\n    ensureArray,\n    ensureObject,\n    getSortedPostsData,\n    getAllPostIds,\n    getPostData\n}"]},"metadata":{},"sourceType":"module"}