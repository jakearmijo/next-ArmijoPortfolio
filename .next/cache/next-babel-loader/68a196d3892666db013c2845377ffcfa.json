{"ast":null,"code":"import _defineProperty from \"/Users/jake/CodingCentral/next-ArmijoPortfolio/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport path from 'path';\nimport matter from 'gray-matter';\n\nvar ensureString = function ensureString(string) {\n  return string ? \"\".concat(string) : '';\n};\n\nvar ensureNumeric = function ensureNumeric(string) {\n  return Number(ensureString(string).replace(/[^0-9.]/gi, ''));\n};\n\nvar ensureArray = function ensureArray() {\n  var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return !array ? [] : Array.isArray(array) ? array : [array];\n};\n\nvar ensureObject = function ensureObject(object) {\n  return object || {};\n}; // POST.JS\n\n\nvar postsDirectory = path.join(process.cwd(), 'blogposts');\nexport function getSortedPostsData() {\n  console.log(\"ðŸš€ ~ file: index.js ~ line 22 ~ postsDirectory\", postsDirectory); // Get file names under /posts\n\n  var fileNames = fs.readdirSync(postsDirectory);\n  var allPostsData = ensureArray(fileNames.map(function (fileName) {\n    // Remove \".md\" from file name to get id\n    var id = fileName.replace(/\\.md$/, ''); // Read markdown file as string\n\n    var fullPath = path.join(postsDirectory, fileName);\n    var fileContents = fs.readFileSync(fullPath, 'utf8'); // Use gray-matter to parse the post metadata section\n\n    var matterResult = matter(fileContents); // Combine the data with the id\n\n    return _objectSpread({\n      id: id\n    }, matterResult.data);\n  })); // Sort posts by date\n\n  return allPostsData.sort(function (a, b) {\n    if (a.date < b.date) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}\nexport { ensureString, ensureNumeric, ensureArray, ensureObject };","map":{"version":3,"sources":["/Users/jake/CodingCentral/next-ArmijoPortfolio/lib/utils/index.js"],"names":["path","matter","ensureString","string","concat","ensureNumeric","Number","replace","ensureArray","array","arguments","length","undefined","Array","isArray","ensureObject","object","postsDirectory","join","process","cwd","getSortedPostsData","console","log","fileNames","fs","readdirSync","allPostsData","map","fileName","id","fullPath","fileContents","readFileSync","matterResult","data","sort","a","b","date"],"mappings":";;;;;;AACA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;;AAGA,IAAIC,YAAY,GAAG,SAASA,YAAT,CAAsBC,MAAtB,EAA8B;AAC7C,SAAOA,MAAM,GAAG,GAAGC,MAAH,CAAUD,MAAV,CAAH,GAAuB,EAApC;AACD,CAFH;;AAGA,IAAIE,aAAa,GAAG,SAASA,aAAT,CAAuBF,MAAvB,EAA+B;AACnD,SAAOG,MAAM,CAACJ,YAAY,CAACC,MAAD,CAAZ,CAAqBI,OAArB,CAA6B,WAA7B,EAA0C,EAA1C,CAAD,CAAb;AACC,CAFD;;AAGA,IAAIC,WAAW,GAAG,SAASA,WAAT,GAAuB;AACzC,MAAIC,KAAK,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAhF;AACA,SAAO,CAACD,KAAD,GAAS,EAAT,GAAcI,KAAK,CAACC,OAAN,CAAcL,KAAd,IAAuBA,KAAvB,GAA+B,CAACA,KAAD,CAApD;AACC,CAHD;;AAIA,IAAIM,YAAY,GAAG,SAASA,YAAT,CAAsBC,MAAtB,EAA8B;AACjD,SAAOA,MAAM,IAAI,EAAjB;AACC,CAFD,C,CAIA;;;AACA,IAAMC,cAAc,GAAGjB,IAAI,CAACkB,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,WAAzB,CAAvB;AAEA,OAAO,SAASC,kBAAT,GAA8B;AACjCC,EAAAA,OAAO,CAACC,GAAR,CAAY,gDAAZ,EAA8DN,cAA9D,EADiC,CAEnC;;AACA,MAAMO,SAAS,GAAGC,EAAE,CAACC,WAAH,CAAeT,cAAf,CAAlB;AACA,MAAMU,YAAY,GAAGnB,WAAW,CAACgB,SAAS,CAACI,GAAV,CAAc,UAAAC,QAAQ,EAAI;AACzD;AACA,QAAMC,EAAE,GAAGD,QAAQ,CAACtB,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAX,CAFyD,CAIzD;;AACA,QAAMwB,QAAQ,GAAG/B,IAAI,CAACkB,IAAL,CAAUD,cAAV,EAA0BY,QAA1B,CAAjB;AACA,QAAMG,YAAY,GAAGP,EAAE,CAACQ,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB,CANyD,CAQzD;;AACA,QAAMG,YAAY,GAAGjC,MAAM,CAAC+B,YAAD,CAA3B,CATyD,CAWzD;;AACA;AACEF,MAAAA,EAAE,EAAFA;AADF,OAEKI,YAAY,CAACC,IAFlB;AAID,GAhBgC,CAAD,CAAhC,CAJmC,CAqBnC;;AACA,SAAOR,YAAY,CAACS,IAAb,CAAkB,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACjC,QAAID,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAf,EAAqB;AACnB,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAO,CAAC,CAAR;AACD;AACF,GANM,CAAP;AAOD;AAED,SACIrC,YADJ,EAEIG,aAFJ,EAGIG,WAHJ,EAIIO,YAJJ","sourcesContent":["\nimport path from 'path'\nimport matter from 'gray-matter'\n\n\nvar ensureString = function ensureString(string) {\n    return string ? \"\".concat(string) : '';\n  }; \nvar ensureNumeric = function ensureNumeric(string) {\nreturn Number(ensureString(string).replace(/[^0-9.]/gi, ''));\n};\nvar ensureArray = function ensureArray() {\nvar array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\nreturn !array ? [] : Array.isArray(array) ? array : [array];\n};\nvar ensureObject = function ensureObject(object) {\nreturn object || {};\n};\n\n// POST.JS\nconst postsDirectory = path.join(process.cwd(), 'blogposts')\n\nexport function getSortedPostsData() {\n    console.log(\"ðŸš€ ~ file: index.js ~ line 22 ~ postsDirectory\", postsDirectory)\n  // Get file names under /posts\n  const fileNames = fs.readdirSync(postsDirectory)\n  const allPostsData = ensureArray(fileNames.map(fileName => {\n    // Remove \".md\" from file name to get id\n    const id = fileName.replace(/\\.md$/, '')\n\n    // Read markdown file as string\n    const fullPath = path.join(postsDirectory, fileName)\n    const fileContents = fs.readFileSync(fullPath, 'utf8')\n\n    // Use gray-matter to parse the post metadata section\n    const matterResult = matter(fileContents)\n\n    // Combine the data with the id\n    return {\n      id,\n      ...matterResult.data\n    }\n  }))\n  // Sort posts by date\n  return allPostsData.sort((a, b) => {\n    if (a.date < b.date) {\n      return 1\n    } else {\n      return -1\n    }\n  })\n}\n\nexport {\n    ensureString,\n    ensureNumeric,\n    ensureArray,\n    ensureObject,\n}"]},"metadata":{},"sourceType":"module"}